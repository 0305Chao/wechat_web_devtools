'use strict';!function(require,directRequire){function a(a){let b=h.createHash('md5');return b.update(a).digest('hex')}async function b(a,b=()=>{}){return new Promise(async(c,d)=>{try{const d=Date.now(),e=[...a];b('compilejs','\u6B63\u5728\u5904\u7406 '+a[0].file);const f=await Promise.all(a.map((a)=>{return l({taskName:'processJS',config:{file:a.file,es6:a.es6?'yes':'no',minified:a.minified?'yes':'no',sourceMaps:'map'},dataStr:a.code,maxTimeout:180000,useBackup:!0,downgrade:!1,onAfterRun:()=>{const c=e.findIndex((b)=>b===a);0<=c&&e.splice(c,1),e[0]&&b('compilejs','\u6B63\u5728\u5904\u7406 '+e[0].file)}})}));console.log(`compilejs all files cost time: ${Date.now()-d}`),c(f)}catch(a){a instanceof Error?d(a):d(new Error(a))}})}const c=require('fs'),d=require('path'),e=require('mkdir-p'),f=require('babel-core'),g=require('uglify-js'),h=require('crypto'),i=require('./162bf2ee28b76d3b3d95b685cede4146.js'),j=require('babel-code-frame'),k=require('./common/locales/index.js'),l=require('./9beb6be9c4f08fd7406b0e6f964234ea.js'),{bufToUTF8:m}=require('./efc820e1b92d6e4063535296d4a24213.js'),{FILE_NOT_UTF8:n,BABEL_TRANS_JS_ERR:o,UGLIFY_JS_ERR:p,BABILI_JS_ERR:q}=require('./949d8235c744ced2a80121e4dba34c28.js');var r={};module.exports=function(f,g={}){r[f.hash]||(r[f.hash]={});const h=g.onProgressUpdate||function(){},j=g.onFilesIgnored||function(){};let l=r[f.hash];return new Promise(async(o,p)=>{let{es6:q,minified:r,newFeature:s}=f.setting,{distPath:t}=g,u=await i(f),v=u.getAllJSFiles();const w=[],x=[];for(let b=0,e=v.length;b<e;b++){let e=v[b],f=u.getFile(e,null),g=m(f),h='';if(void 0===g){let a=new Error(k.config.FILE_NOT_UTF8.format(e));return a.code=n,p(a)}let i=Date.now(),j=a(g),o=`${e}_${q}_${r}_${s}`;if(l[o]&&l[o].md5===j)g=l[o].jsCode,h=l[o].map,console.log('compile js',e,'in cache, skip.');else{if((q||r)&&g.length<512000)w.push({file:e,code:g,es6:q,minified:r,md5:j});else try{const a=/\/\/[#|@] sourceMappingURL=[\s]*(\S*)[\s]*$/.exec(g);if(a&&a[1])if(/\.js\.map$/.test(a[1])){let b=d.dirname(d.join(u.srcPath,e));h=c.readFileSync(d.join(b,a[1])),h=JSON.stringify(JSON.parse(h))}else{const b=a[1].split('base64,')[1];h=Buffer.from(b,'base64').toString(),h=JSON.stringify(JSON.parse(h))}}catch(a){h=''}l[o]={md5:j,jsCode:g,map:h,ignored:(q||r)&&g.length>=512000}}}if(0<w.length){let a=[];try{a=await b(w,h)}catch(a){return p(a)}for(let b=0,c=w.length;b<c;b++){if(a[b].error){const c=a[b].error,d=new Error(c.message);return d.code=c.code,p(d)}const{file:c,md5:d}=w[b];l[`${c}_${q}_${r}_${s}`]={md5:d,jsCode:a[b].code,map:a[b].map}}}for(let a=0,b=v.length;a<b;a++){const b=v[a];let f=d.join(t,b),g=d.dirname(f);e.sync(g);const h=l[`${b}_${q}_${r}_${s}`];if(h&&h.jsCode){const a=h.jsCode;c.writeFileSync(f,a),h.ignored&&x.push(b),h.map&&c.writeFileSync(d.join(t,`${b}.map`),h.map)}}j(x),o()})}}(require('lazyload'),require);